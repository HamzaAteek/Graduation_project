  const { state } = useContext(GameContext); // الوصول إلى الحالة
  const activeGenre = state.gameQuery?.active; // الوصول إلى active
  const selectedGenre = state.gameQuery?.selectGenre; // الوصول إلى selectGenre

--------------------------------------------
import { useInfiniteQuery } from "@tanstack/react-query";
import apiClient from "../services/api-client";

const useDataQuery = ({ endPoint, filters, pageSize = 6 }) => {
  const fetchGames = async ({ pageParam = 1 }) => {
    const { data } = await apiClient.get(endPoint, {
      params: { ...filters, page: pageParam, pageSize }, // إضافة `pageSize`
    });
    return data;
  };

  return useInfiniteQuery({
    queryKey: filters ? ["games", endPoint, filters] : ["games", endPoint],
    queryFn: fetchGames,
    getNextPageParam: (lastPage) => {
      if (lastPage.next) {
        const url = new URL(lastPage.next);
        const nextPage = url.searchParams.get("page");
        return nextPage ? Number(nextPage) : undefined;
      }
      return undefined;
    },
    initialPageParam: 1,
  });
};

export default useDataQuery;
import useDataQuery from "../hooks/useDataQuery";

const useGame = (
  selectGenre,
  selectPlatform,
  selectSortOrder,
  selectSearchText
) => {
  return useDataQuery({
    endPoint: "/games",
    filters: {
      genres: selectGenre?.id,
      platforms: selectPlatform?.id,
      ordering: selectSortOrder,
      search: selectSearchText,
    },
    pageSize: 6, // تحديد حجم الصفحة
  });
};

export default useGame;
import { useEffect } from "react";
import useGame from "../hooks/useGame";
import GameCard from "./GameCard";
import GameCardSkeleton from "./GameCardSkeleton";

const GameList = ({
  selectGenre,
  selectPlatform,
  selectSortOrder,
  selectSearchText,
}) => {
  const {
    data,
    error,
    isLoading,
    fetchNextPage,
    hasNextPage,
    isFetchingNextPage,
  } = useGame(selectGenre, selectPlatform, selectSortOrder, selectSearchText);

  const skeletonCount = 6; // عرض 6 عناصر وهمية فقط

  if (error)
    return (
      <div
        className="p-4 mb-4 text-sm text-red-800 rounded-lg bg-red-50 dark:bg-gray-800 dark:text-red-400"
        role="alert"
      >
        <span className="font-medium">{error}</span>
      </div>
    );

  // دمج جميع العناصر من الصفحات
  const allGames = data?.pages?.flatMap((page) => page.results) || [];

  return (
    <>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
        {isLoading
          ? Array.from({ length: skeletonCount }).map((_, index) => (
              <GameCardSkeleton key={index} />
            ))
          : allGames.slice(0, 6).map(
              (
                game // عرض جميع العناصر
              ) => <GameCard key={game.id} game={game} />
            )}
      </div>

      {hasNextPage && (
        <div className="fter:h-px my-24 flex items-center before:h-px before:flex-1  before:bg-gray-300 before:content-[''] after:h-px after:flex-1 after:bg-gray-300  after:content-['']">
          <button
            onClick={() => fetchNextPage()}
            disabled={isFetchingNextPage}
            type="button"
            className="flex items-center rounded-full border border-gray-300 bg-secondary-50 px-3 py-2 text-center text-sm font-medium text-gray-900 hover:bg-gray-100"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 20 20"
              fill="currentColor"
              className="mr-1 h-4 w-4"
            >
              <path
                fillRule="evenodd"
                d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z"
                clipRule="evenodd"
              />
            </svg>
            {isFetchingNextPage ? "جاري التحميل..." : "تحميل المزيد"}
          </button>
        </div>
      )}
    </>
  );
};

export default GameList;
//////////////////////////
//////////////////////////
///////////////////////////
import MainContent from "./componants/MainContent";
import SideBar from "./componants/SideBar";
import Nav from "./componants/Nav";
import { useEffect, useReducer, useState } from "react";

function App() {
  const [theme, setTheme] = useState(localStorage.getItem("theme") || "light"); //يوس ستايت خاصة لتخزيم وضعية الوضع الليلي سيتم جلب القيمة من المخزن المحلي

  //يوستايت شاملة لنظافة الكود
  const [gameQuery, setGameQuery] = useState({});
  const root = document.documentElement; //تخزين الصفحة الكاملة بهذا المتغير

  useEffect(() => {
    if (theme === "dark") {
      //فحص اذا كان الوضع المتغير هو ليلي
      root.classList.add("dark"); //إعطاء كلاس للعنصر الأب لكل الصفحة اسمه دارك
    } else {
      root.classList.remove("dark"); //اذا لم يكن اسمه دارك احذف هذه الكلاس
    }
    localStorage.setItem("theme", theme); //خزن بالمخزن المحلي المفتاح اسمه ثيم وقيمته القيمة الموجودة باليوس ستايت
  }, [theme]); //اعطينا قيمة الثيم للديبيدينسي

  const toggleTheme = () => {
    setTheme(theme === "light" ? "dark" : "light"); //دالة مهمتها عكس الثيم
  };

  return (
    <>
      <div className=" bg-white dark:bg-gray-900 text-gray-900 dark:text-white">
        {/* تغيير الخطود بناء على وضع الثيم */}
        <Nav
          toggleTheme={toggleTheme}
          theme={theme}
          onSearch={(selectSearchText) =>
            setGameQuery({ ...gameQuery, selectSearchText })
          }
        />
        <div className="grid grid-cols-6 p-2">
          {/* استدعاء الملف مع ارسال الدالة كبروبس للابن وغند الضغط يتم حفظ المعلومات باليوستايت الخاصة به */}
          <SideBar
            onSelectGenre={(genre) => setGameQuery({ ...gameQuery, genre })}
          />
          <MainContent
            selectGenre={gameQuery.genre}
            selectPlatform={gameQuery.platform}
            selectSortOrder={gameQuery.sortOrder}
            selectSearchText={gameQuery.selectSearchText}
            onSelectPlatform={(platform) =>
              setGameQuery({ ...gameQuery, platform })
            }
            onSelectSortOrder={(sortOrder) =>
              setGameQuery({ ...gameQuery, sortOrder })
            }
          />
        </div>
      </div>
    </>
  );
}

export default App;
import axios from "axios";

export default axios.create({
  baseURL: "https://api.rawg.io/api",
  params: {
    key: "5c8468f1d3a04b989b06e237f0cb6986",
  },
});
//هذا الملف للتحكم بحجم الصورة عن طريق الرابط تبعها باضافة الرقم الذي نريده لتعيين حجمها
//هذه الدالة مهمتها التعديل على رابط الصورة الذي سينرسله لها
import noImage from "../assets/images/noImage.jpg"; //اذا لم يكن هنالك صورة موجودة نضع صورة افتراضية مكانها
const getCroppedImageUrl = (url) => {
  if (!url) return noImage; //اذا لم تكن هنالك صورة سيرجع null
  const target = "media/"; //للتنظيم استبدال كلمة ميديا بمتغير لتنظيم الكود
  const index = url.indexOf(target) + target.length; //البحث عن هذه الكلمة ضمن الرابط ومعرفة الدليل تبعها وتخزينه بالمتغير بالإضافة لطول الكلمة نفسها (ليتم الأضافة بعد هذه الكلمة)
  return url.slice(0, index) + "crop/600/400/" + url.slice(index); //بهذه التعليمة جلب الرابط من الأول الى نهاية كلمة الميديا واضاف عليها كلمة الحجم التي تحدد الحجم بالإضافة الى الباقي من الكود من الميديا الى النهاية باعتبار اننا خزنا الدليل تبع الميديا بالاندكس
};
export default getCroppedImageUrl; //لتصدير هذه الدالة ليتم رؤتها بغير ملفات
import { useQuery } from "@tanstack/react-query";
import apiClient from "../services/api-client";

const useDataQuery = ({ endPoint, filters }) => {
  const fetchGames = async () => {
    const { data } = await apiClient.get(endPoint, { params: filters });
    return data.results;
  };
  return useQuery({
    queryKey: filters ? ["games", endPoint, filters] : ["games", endPoint], //تم تضمين الفلتر ونهاية الكود ليتم تحديث البيانات عند تحديث اي منهم
    queryFn: fetchGames,
  });
};
export default useDataQuery;
import useDataQuery from "../hooks/useDataQuery";

const useGame = (
  selectGenre,
  selectPlatform,
  selectSortOrder,
  selectSearchText
) => {
  return useDataQuery({
    endPoint: "/games", //تمرير نهاية الرابط
    filters: {
      //عن طريق هذه تم الفلترة ببارمترات عدة
      genres: selectGenre?.id,
      platforms: selectPlatform?.id,
      ordering: selectSortOrder,
      search: selectSearchText,
    },
  });
};
export default useGame;
import useDataQuery from "../hooks/useDataQuery";

const useGenres = () => useDataQuery({ endPoint: "/genres" });
export default useGenres;
//ملف لجلب بيانات المنصات
import useDataQuery from "../hooks/useDataQuery";

const usePlatform = () =>
  useDataQuery({ endPoint: "/platforms/lists/parents" });
export default usePlatform;
//كوبونانت لعرض التقييمات

const CriticScore = ({ score }) => {
  //يتم تلوين العنصر بناء على تصنيفه
  // var color = score > 90 ? "orange" : score > 85 ? "yellow" : "";
  const colorClass =
    score > 90
      ? "bg-green-300 text-green-900 dark:bg-green-900 dark:text-green-300"
      : score > 85
      ? "bg-yellow-300 text-yellow-900 dark:bg-yellow-900 dark:text-yellow-300"
      : "bg-red-300 text-red-900 dark:bg-red-900 dark:text-red-300";
  return (
    <span
      className={`text-xs font-medium me-2 px-2.5 py-0.5 rounded ${colorClass}`}

      // className={`bg-${color}-100 text-${color}-800 text-xs font-medium me-2 px-2.5 py-0.5 rounded dark:bg-${color}-900 dark:text-${color}-300`}
    >
      {score}
    </span>
  );
};

export default CriticScore;
import getCroppedImageUrl from "../services/image-url";
import CriticScore from "./CriticScore";
import PlatformIconList from "./PlatformIconList";
import RatingByEmojy from "./RatingByEmojy";

//كومبونانت لتصميم الكرت الذي سنعرضه
const GameCard = ({ game }) => {
  return (
    <div className="max-w-sm bg-white border border-gray-200 rounded-lg shadow dark:bg-gray-800 dark:border-gray-700">
      {/* عرض الصورة */}
      <a href="#">
        <img
          className="rounded-t-lg w-full h-50"
          src={getCroppedImageUrl(game.background_image)} //استدعاء الدالة التي ستعرض الصورة بحجم محدد وتمرير رابط الصورة لها
          alt=""
        />
      </a>
      <div className="p-5">
        {/* عرض اسم كل لعبة */}
        <a href="#">
          <h5 className="mb-2 text-xl font-bold tracking-tight text-gray-900 dark:text-white">
            {game.name} <RatingByEmojy rating={game.rating_top} />
          </h5>
        </a>
        {/* عرض المنصات التي تعمل عليها كل لعبة */}
        <div className="flex justify-between items-center flex-wrap">
          <div className="platform">
            <PlatformIconList
              platforms={game.parent_platforms.map((p) => p.platform)}
            />
          </div>
          <div className="score">
            <CriticScore score={game.metacritic} />
          </div>
        </div>
      </div>
    </div>
  );
};

export default GameCard;
//كومبونانت خاص لعرض السكيليتون العناصر اتلوهمية مكان العناصر الأساسية بينما يتم تحميلها
import Skeleton from "react-loading-skeleton";
import "react-loading-skeleton/dist/skeleton.css";

const GameCardSkeleton = () => {
  return (
    <div className="max-w-sm bg-white border border-gray-200 rounded-lg shadow dark:bg-gray-800 dark:border-gray-700">
      {/* عرض الصورة */}
      <div className="rounded-t-lg w-full h-50">
        <Skeleton height={200} className="w-full h-full" />
      </div>
      <div className="p-5">
        {/* عرض اسم اللعبة */}
        <h5 className="mb-2 text-2xl font-bold tracking-tight text-gray-900 dark:text-white">
          <Skeleton width={150} />
        </h5>
        {/* عرض المنصات التي تعمل عليها كل لعبة */}
        <div className="flex justify-between items-center">
          <div className="platform">
            <Skeleton width={100} />
          </div>
          <div className="score">
            <Skeleton width={40} height={20} />
          </div>
        </div>
      </div>
    </div>
  );
};

export default GameCardSkeleton;
//هذا الكومبونانت الخاص بعرض الأسماء التي يتم الفلرتة بناء عليها
const GameHead = ({ selectGenre, selectPlatform, selectSortOrder }) => {
  const heading = `${selectGenre?.name || ""} ${selectPlatform?.name || ""} ${
    selectSortOrder || ""
  } Games`;
  return <h1>{heading}</h1>;
};

export default GameHead;
//هذا الكومبونانت الخاص بعرض الأسماء التي يتم الفلرتة بناء عليها
const GameHead = ({ selectGenre, selectPlatform, selectSortOrder }) => {
  const heading = `${selectGenre?.name || ""} ${selectPlatform?.name || ""} ${
    selectSortOrder || ""
  } Games`;
  return <h1>{heading}</h1>;
};

export default GameHead;
import useGame from "../hooks/useGame";
import GameCard from "./GameCard";
import GameCardSkeleton from "./GameCardSkeleton";

//كومبونانت لعرض الكروت
const GameList = ({
  selectGenre,
  selectPlatform,
  selectSortOrder,
  selectSearchText,
}) => {
  const { data, error, isLoading } = useGame(
    selectGenre,
    selectPlatform,
    selectSortOrder,
    selectSearchText
  ); //تمرير البروبس الذي يحتوي على المعلومات المفلترة لليوس جايم لجلب البيانات بطريقة مفلترة

  const skeletonCount = 11; //متغير نحدد من خلاله عدد الكروت الوهمية التي ستظهر ريثما يتم تحميل البيانات
  if (error)
    return (
      <div
        className="p-4 mb-4 text-sm text-red-800 rounded-lg bg-red-50 dark:bg-gray-800 dark:text-red-400"
        role="alert"
      >
        <span className="font-medium">{error}</span>
      </div>
    );
  return (
    <>
      <div className="grid grid-cols-1  md:grid-cols-2 lg:grid-cols-3 gap-3">
        {isLoading ? ( //فحص المتغير هل قيمته ترو ام فولس
          Array.from({ length: skeletonCount })?.map(
            (
              _,
              index //إذا تحقق الشرط يتم انشاء حلقة لإنشاء عناصر بعدد معين
            ) => (
              <GameCardSkeleton key={index} /> //استدعاء كومبونانت السكيليتون
            )
          )
        ) : data?.length > 0 ? (
          data?.map((dd) => <GameCard key={dd.id} game={dd} />) //اذا لم يتحقق الشرط يتم استدعاء الكرت النظامي
        ) : (
          <div className="col-span-full text-center text-gray-500">
            There is no Games
          </div>
        )}
      </div>
    </>
  );
};

export default GameList;
//كومبونانت لعرض انواع الالعاب التي على  اليسار
import { useState } from "react";
import useGenres from "../hooks/useGenres";

const GenreList = ({ onSelectGenre }) => {
  const { data, isLoading } = useGenres();
  const [active, setActive] = useState(null); //يوستايت خاصة لتعيين لون مخصص للزر المضغوط

  //   const { data } = useGenres("/genres"); //استدعاء الملف الذي يجلب الداتا مع اعطاؤه نهاية اللينك الذي سيجلب الداتا منه
  const handelClick = (id) => {
    setActive(id);
  };
  if (isLoading)
    return (
      <div role="status">
        <svg
          aria-hidden="true"
          className="w-8 h-8 text-gray-200 animate-spin dark:text-gray-600 fill-blue-600"
          viewBox="0 0 100 101"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z"
            fill="currentColor"
          />
          <path
            d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z"
            fill="currentFill"
          />
        </svg>
        <span className="sr-only">Loading...</span>
      </div>
    );
  return (
    <>
      <div className="flex flex-col">
        {data?.map((d) => (
          <div key={d.id}>
            <button
              className={`flex flex-row text-xs  p-2 w-full hover:bg-slate-400 ${
                active === d.id ? "bg-green-600 shadow-lg" : ""
              }`} //تعيين لون مخصص للزر المضغوط
              onClick={() => {
                onSelectGenre(d); //عند الضغط على الفئة سيتم الفلترة على اساسها وذلك بارسال هذه المعلومات للأب
                handelClick(d.id);
              }}
            >
              <img
                src={d.image_background}
                width={40}
                height={40}
                className="mr-2"
              />
              {d.name}
            </button>
          </div>
        ))}
      </div>
    </>
  );
};

export default GenreList;
//إشاء كومبونانت لل لوغو افضل تنظيميا اذا تم استخدام اللوغو بعدة اماكن
import img from "../assets/images/react.svg";

const Logo = ({ text, className }) => {
  //استدعاء الصورة مع تمرير نص كبروبس وتمرير التنسيقات كبروبس
  return <img src={img} alt={text} className={`logo ${className}`} />; //اعطاء الصورة كلاسين واحد رئيسي والثاني يمرر كبروبس
};

export default Logo;
//كومبونانت خاص لعرض الاأيقونات الخاصة بالألعاب التي تظهر المنصات التي تعمل عليها الألعاب
import { GrPersonalComputer } from "react-icons/gr";
import { FaPlaystation } from "react-icons/fa";
import { FaXbox } from "react-icons/fa";
import { BsNintendoSwitch } from "react-icons/bs";
import { FaApple } from "react-icons/fa";
import { FaAndroid } from "react-icons/fa";
import { MdPhoneIphone } from "react-icons/md";
import { BsGlobe } from "react-icons/bs";
import { FaLinux } from "react-icons/fa";

const PlatformIconList = ({ platforms }) => {
  const iconMap = {
    //عرفنا اوبجكت لكي نخزن فيه كل اسم ايقونة بالأي بي اي مقابله باسم الايقونة التي سنضيفها
    pc: GrPersonalComputer,
    playstation: FaPlaystation,
    xbox: FaXbox,
    nintendo: BsNintendoSwitch,
    mac: FaApple,
    linux: FaLinux,
    android: FaAndroid,
    ios: MdPhoneIphone,
    web: BsGlobe,
  };
  return (
    <>
      <div className="flex space-x-2 my-2">
        {platforms.map((platform) => {
          //استخدمنا حلقة للمرور على كل العناصر
          const Icon = iconMap[platform.slug];
          return <Icon key={platform.id} className="w-6 h-6 text-gray-600" />; //هنا تم استدعاء الأيقونة المقابلة لكل اسم موجود بالبلاتفورم.سلاج سيجلب الاسم المقابل للأيقونة ويتم استدعاؤها من فوق
        })}
      </div>
    </>
  );
};

export default PlatformIconList;
import { useState } from "react";
import usePlatform from "../hooks/usePlatform";

//كومبونانت خاص للقائمة التي من خلالها سيتم فلترة الألعاب حسب المنصات التي تعمل عليها
const PlatformSelector = ({ onSelectPlatform, selectPlatform }) => {
  const { error, results: data } = usePlatform();
  if (error) return null;
  return (
    <>
      <button
        id="platformDropdownButton"
        data-dropdown-toggle="platformDropdown"
        class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center inline-flex items-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800"
        type="button"
      >
        {selectPlatform ? selectPlatform.name : "Platfroms"}{" "}
        <svg
          class="w-2.5 h-2.5 ms-3"
          aria-hidden="true"
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 10 6"
        >
          <path
            stroke="currentColor"
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="m1 1 4 4 4-4"
          />
        </svg>
      </button>
      <div
        id="platformDropdown"
        class="z-10 hidden bg-white divide-y divide-gray-100 rounded-lg shadow-sm w-44 dark:bg-gray-700"
      >
        <ul
          class="py-2 text-sm text-gray-700 dark:text-gray-200"
          aria-labelledby="platformDropdownButton"
        >
          {/* هذا الخيار لإرجاع القائمة بدون فلترة */}
          <li onClick={() => onSelectPlatform(null)}>
            <a
              href="#"
              class="block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white"
            >
              None
            </a>
          </li>
          {data?.map((platform) => (
            <li
              key={platform.id}
              onClick={() => onSelectPlatform(platform)}
              class="block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white cursor-pointer"
            >
              {platform?.name}
            </li>
          ))}
        </ul>
      </div>
    </>
  );
};

export default PlatformSelector;
//كومبونانت لعرض التقيمات كصور
import exeptional from "../assets/images/exeptional.png";
import recommended from "../assets/images/recommended.png";
import meh from "../assets/images/meh.webp";
import skip from "../assets/images/skip.png";

const RatingByEmojy = ({ rating }) => {
  const emojy = {
    2: { src: skip, alt: "skip" },
    3: { src: meh, alt: "meh" },
    4: { src: recommended, alt: "recommended" },
    5: { src: exeptional, alt: "exeptional" },
  };
  return <img {...emojy[rating]} width={25} />;
};

export default RatingByEmojy;
import React, { useRef } from "react";

const SearchInput = ({ onSearch }) => {
  const refValue = useRef(null);
  const Search = (event) => {
    if (refValue) onSearch(refValue.current.value);
  };
  return (
    <form>
      <label
        htmlFor="default-search"
        className="mb-2 text-sm font-medium text-gray-900 sr-only dark:text-white"
      >
        Search
      </label>
      <div className="relative">
        <div className="absolute inset-y-0 start-0 flex items-center ps-3 pointer-events-none">
          <svg
            className="w-4 h-4 text-gray-500 dark:text-gray-400"
            aria-hidden="true"
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 20 20"
          >
            <path
              stroke="currentColor"
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="m19 19-4-4m0-7A7 7 0 1 1 1 8a7 7 0 0 1 14 0Z"
            />
          </svg>
        </div>
        <input
          onChange={Search}
          ref={refValue}
          type="search"
          id="default-search"
          className="block w-full p-4 ps-10 text-sm text-gray-900 border border-gray-300 rounded-lg bg-gray-50 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
          placeholder="Search Games"
          required
        />
      </div>
    </form>
  );
};

export default SearchInput;
//كومبونانت لعرض الثائمة التي على اليسار
import GenreList from "./GenreList";

const SideBar = ({ onSelectGenre }) => {
  //تمرير الدالة كوسيط للابن
  return (
    <div className="col-span-1">
      <GenreList onSelectGenre={onSelectGenre} />
    </div>
  ); //استدعاء الكومبونانت الذي يحتوي على الانواع
};

export default SideBar;
const SortSelector = ({ onSelectSortOrder, selectSortOrder }) => {
  //مصفوفة تحتوي على القيم لفرز الألعاب حسب عدة قيم من الapi
  const sortOrders = [
    { value: "", label: "Relevance" },
    { value: "-added", label: "Date added" },
    { value: "name", label: "Name" },
    { value: "-release", label: "Release date" },
    { value: "-metacritic", label: "Popularity" },
    { value: "-rating", label: "Average rating" },
  ];
  //دالة للبحث عن القيمة وترجعها اذا لم يكن هنالك قيمة تضع القيمة الافتراضية
  const selectedSortLabel =
    sortOrders.find((order) => order.value === selectSortOrder)?.label ||
    "Relevance";

  return (
    <>
      <button
        id="sortDropdownButton"
        data-dropdown-toggle="sortDropdown"
        class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center inline-flex items-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800"
        type="button"
      >
        Order by: {selectedSortLabel}
        <svg
          className="w-2.5 h-2.5 ms-3"
          aria-hidden="true"
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 10 6"
        >
          <path
            stroke="currentColor"
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth="2"
            d="m1 1 4 4 4-4"
          />
        </svg>
      </button>
      <div
        id="sortDropdown"
        class="z-10 hidden bg-white divide-y divide-gray-100 rounded-lg shadow-sm w-44 dark:bg-gray-700"
      >
        <ul
          class="py-2 text-sm text-gray-700 dark:text-gray-200"
          aria-labelledby="sortDropdownButton"
        >
          {sortOrders.map((order) => (
            <li
              class="block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white cursor-pointer"
              key={order.value}
              value={order.value}
              onClick={() => onSelectSortOrder(order.value)}
            >
              <a href="#">{order.label}</a>
            </li>
          ))}
        </ul>
      </div>
    </>
  );
};

export default SortSelector;
# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh
