import MainContent from "./componants/MainContent";
import SideBar from "./componants/SideBar";
import Nav from "./componants/Nav";
import { useEffect, useState } from "react";

function App() {
  const [theme, setTheme] = useState(localStorage.getItem("theme") || "light"); //يوس ستايت خاصة لتخزيم وضعية الوضع الليلي سيتم جلب القيمة من المخزن المحلي

  //يوستايت شاملة لنظافة الكود
  const [gameQuery, setGameQuery] = useState({});

  const root = document.documentElement; //تخزين الصفحة الكاملة بهذا المتغير

  useEffect(() => {
    if (theme === "dark") {
      //فحص اذا كان الوضع المتغير هو ليلي
      root.classList.add("dark"); //إعطاء كلاس للعنصر الأب لكل الصفحة اسمه دارك
    } else {
      root.classList.remove("dark"); //اذا لم يكن اسمه دارك احذف هذه الكلاس
    }
    localStorage.setItem("theme", theme); //خزن بالمخزن المحلي المفتاح اسمه ثيم وقيمته القيمة الموجودة باليوس ستايت
  }, [theme]); //اعطينا قيمة الثيم للديبيدينسي

  const toggleTheme = () => {
    setTheme(theme === "light" ? "dark" : "light"); //دالة مهمتها عكس الثيم
  };

  return (
    <>
      <div className=" bg-white dark:bg-gray-900 text-gray-900 dark:text-white">
        {/* تغيير الخطود بناء على وضع الثيم */}
        <Nav
          toggleTheme={toggleTheme}
          theme={theme}
          onSearch={(selectSearchText) =>
            setGameQuery({ ...gameQuery, selectSearchText })
          }
        />
        <div className="grid grid-cols-6 p-2">
          {/* استدعاء الملف مع ارسال الدالة كبروبس للابن وغند الضغط يتم حفظ المعلومات باليوستايت الخاصة به */}
          <SideBar
            onSelectGenre={(genre) => setGameQuery({ ...gameQuery, genre })}
          />
          <MainContent
            selectGenre={gameQuery.genre}
            selectPlatform={gameQuery.platform}
            selectSortOrder={gameQuery.sortOrder}
            selectSearchText={gameQuery.selectSearchText}
            onSelectPlatform={(platform) =>
              setGameQuery({ ...gameQuery, platform })
            }
            onSelectSortOrder={(sortOrder) =>
              setGameQuery({ ...gameQuery, sortOrder })
            }
          />
        </div>
      </div>
    </>
  );
}

export default App;

//كوبونانت لعرض التقييمات

const CriticScore = ({ score }) => {
  //يتم تلوين العنصر بناء على تصنيفه
  // var color = score > 90 ? "orange" : score > 85 ? "yellow" : "";
  const colorClass =
    score > 90
      ? "bg-green-300 text-green-900 dark:bg-green-900 dark:text-green-300"
      : score > 85
      ? "bg-yellow-300 text-yellow-900 dark:bg-yellow-900 dark:text-yellow-300"
      : "bg-red-300 text-red-900 dark:bg-red-900 dark:text-red-300";
  return (
    <span
      className={`text-xs font-medium me-2 px-2.5 py-0.5 rounded ${colorClass}`}

      // className={`bg-${color}-100 text-${color}-800 text-xs font-medium me-2 px-2.5 py-0.5 rounded dark:bg-${color}-900 dark:text-${color}-300`}
    >
      {score}
    </span>
  );
};

export default CriticScore;
import getCroppedImageUrl from "../services/image-url";
import CriticScore from "./CriticScore";
import PlatformIconList from "./PlatformIconList";
import RatingByEmojy from "./RatingByEmojy";

//كومبونانت لتصميم الكرت الذي سنعرضه
const GameCard = ({ game }) => {
  return (
    <div className="max-w-sm bg-white border border-gray-200 rounded-lg shadow dark:bg-gray-800 dark:border-gray-700">
      {/* عرض الصورة */}
      <a href="#">
        <img
          className="rounded-t-lg w-full h-50"
          src={getCroppedImageUrl(game.background_image)} //استدعاء الدالة التي ستعرض الصورة بحجم محدد وتمرير رابط الصورة لها
          alt=""
        />
      </a>
      <div className="p-5">
        {/* عرض اسم كل لعبة */}
        <a href="#">
          <h5 className="mb-2 text-xl font-bold tracking-tight text-gray-900 dark:text-white">
            {game.name} <RatingByEmojy rating={game.rating_top} />
          </h5>
        </a>
        {/* عرض المنصات التي تعمل عليها كل لعبة */}
        <div className="flex justify-between items-center flex-wrap">
          <div className="platform">
            <PlatformIconList
              platforms={game.parent_platforms.map((p) => p.platform)}
            />
          </div>
          <div className="score">
            <CriticScore score={game.metacritic} />
          </div>
        </div>
      </div>
    </div>
  );
};

export default GameCard;
//كومبونانت خاص لعرض السكيليتون العناصر اتلوهمية مكان العناصر الأساسية بينما يتم تحميلها
import Skeleton from "react-loading-skeleton";
import "react-loading-skeleton/dist/skeleton.css";

const GameCardSkeleton = () => {
  return (
    <div className="max-w-sm bg-white border border-gray-200 rounded-lg shadow dark:bg-gray-800 dark:border-gray-700">
      {/* عرض الصورة */}
      <div className="rounded-t-lg w-full h-50">
        <Skeleton height={200} className="w-full h-full" />
      </div>
      <div className="p-5">
        {/* عرض اسم اللعبة */}
        <h5 className="mb-2 text-2xl font-bold tracking-tight text-gray-900 dark:text-white">
          <Skeleton width={150} />
        </h5>
        {/* عرض المنصات التي تعمل عليها كل لعبة */}
        <div className="flex justify-between items-center">
          <div className="platform">
            <Skeleton width={100} />
          </div>
          <div className="score">
            <Skeleton width={40} height={20} />
          </div>
        </div>
      </div>
    </div>
  );
};

export default GameCardSkeleton;
//هذا الكومبونانت الخاص بعرض الأسماء التي يتم الفلرتة بناء عليها
const GameHead = ({ selectGenre, selectPlatform, selectSortOrder }) => {
  const heading = `${selectGenre?.name || ""} ${selectPlatform?.name || ""} ${
    selectSortOrder || ""
  } Games`;
  return <h1>{heading}</h1>;
};

export default GameHead;
import useGame from "../hooks/useGame";
import GameCard from "./GameCard";
import GameCardSkeleton from "./GameCardSkeleton";

//كومبونانت لعرض الكروت
const GameList = ({
  selectGenre,
  selectPlatform,
  selectSortOrder,
  selectSearchText,
}) => {
  const { data, error, isloading } = useGame(
    selectGenre,
    selectPlatform,
    selectSortOrder,
    selectSearchText
  ); //تمرير البروبس الذي يحتوي على المعلومات المفلترة لليوس جايم لجلب البيانات بطريقة مفلترة
  //   const { games, error, isloading } = useGame(); //فك الداتا التي صلنا عليها من الملف التنظيمي بدل كتابة نفس الكود اكتر من مرة

  const skeletonCount = 11; //متغير نحدد من خلاله عدد الكروت الوهمية التي ستظهر ريثما يتم تحميل البيانات
  return (
    <>
      {error && (
        <div
          className="p-4 mb-4 text-sm text-red-800 rounded-lg bg-red-50 dark:bg-gray-800 dark:text-red-400"
          role="alert"
        >
          <span className="font-medium">{error}</span>
        </div>
      )}
      <div className="grid grid-cols-1  md:grid-cols-2 lg:grid-cols-3 gap-3">
        {
          isloading //فحص المتغير هل قيمته ترو ام فولس
            ? Array.from({ length: skeletonCount }).map(
                (
                  index //إذا تحقق الشرط يتم انشاء حلقة لإنشاء عناصر بعدد معين
                ) => (
                  <GameCardSkeleton key={index} /> //استدعاء كومبونانت السكيليتون
                )
              )
            : data.map((dd) => <GameCard key={dd.id} game={dd} />) //اذا لم يتحقق الشرط يتم استدعاء الكرت النظامي
        }
      </div>
    </>
  );
};

export default GameList;
import useGame from "../hooks/useGame";
import GameCard from "./GameCard";
import GameCardSkeleton from "./GameCardSkeleton";

//كومبونانت لعرض الكروت
const GameList = ({
  selectGenre,
  selectPlatform,
  selectSortOrder,
  selectSearchText,
}) => {
  const { data, error, isloading } = useGame(
    selectGenre,
    selectPlatform,
    selectSortOrder,
    selectSearchText
  ); //تمرير البروبس الذي يحتوي على المعلومات المفلترة لليوس جايم لجلب البيانات بطريقة مفلترة
  //   const { games, error, isloading } = useGame(); //فك الداتا التي صلنا عليها من الملف التنظيمي بدل كتابة نفس الكود اكتر من مرة

  const skeletonCount = 11; //متغير نحدد من خلاله عدد الكروت الوهمية التي ستظهر ريثما يتم تحميل البيانات
  return (
    <>
      {error && (
        <div
          className="p-4 mb-4 text-sm text-red-800 rounded-lg bg-red-50 dark:bg-gray-800 dark:text-red-400"
          role="alert"
        >
          <span className="font-medium">{error}</span>
        </div>
      )}
      <div className="grid grid-cols-1  md:grid-cols-2 lg:grid-cols-3 gap-3">
        {
          isloading //فحص المتغير هل قيمته ترو ام فولس
            ? Array.from({ length: skeletonCount }).map(
                (
                  index //إذا تحقق الشرط يتم انشاء حلقة لإنشاء عناصر بعدد معين
                ) => (
                  <GameCardSkeleton key={index} /> //استدعاء كومبونانت السكيليتون
                )
              )
            : data.map((dd) => <GameCard key={dd.id} game={dd} />) //اذا لم يتحقق الشرط يتم استدعاء الكرت النظامي
        }
      </div>
    </>
  );
};

export default GameList;
//إشاء كومبونانت لل لوغو افضل تنظيميا اذا تم استخدام اللوغو بعدة اماكن
import img from "../assets/images/react.svg";

const Logo = ({ text, className }) => {
  //استدعاء الصورة مع تمرير نص كبروبس وتمرير التنسيقات كبروبس
  return <img src={img} alt={text} className={`logo ${className}`} />; //اعطاء الصورة كلاسين واحد رئيسي والثاني يمرر كبروبس
};

export default Logo;
import GameHead from "./GameHead";
import GameList from "./GameList";
import PlatformSelector from "./PlatformSelector";
import SortSelector from "./SortSelector";

const MainContent = ({
  selectGenre,
  selectPlatform,
  onSelectPlatform,
  onSelectSortOrder,
  selectSortOrder,
  selectSearchText,
}) => {
  return (
    <div className="MainContent col-span-5">
      <div className="flex gap-6 mb-2 justify-between">
        <div>
          <GameHead
            selectGenre={selectGenre}
            selectPlatform={selectPlatform}
            selectSortOrder={selectSortOrder}
          />
        </div>
        <div>
          <div>
            <PlatformSelector
              onSelectPlatform={onSelectPlatform}
              selectPlatform={selectPlatform}
            />
            <SortSelector
              selectSortOrder={selectSortOrder}
              onSelectSortOrder={onSelectSortOrder}
            />
          </div>
        </div>
      </div>
      <div>
        <GameList
          selectGenre={selectGenre}
          selectPlatform={selectPlatform}
          selectSortOrder={selectSortOrder}
          selectSearchText={selectSearchText}
        />
      </div>
    </div>
  );
};

export default MainContent;
//الكومبونانت الخاص بالشريط الرئيسي
import React from "react";
import Logo from "./Logo"; //تضمين اللوغو
import SearchInput from "./SearchInput";

const Nav = ({ toggleTheme, theme, onSearch }) => {
  return (
    <>
      <div className="navbar-app">
        <div>
          <Logo text="game app header" className="logo-header" />
        </div>

        <div className="cover-search mx-2 flex-grow">
          <SearchInput onSearch={onSearch} />
        </div>
        <div className="theme-mode">
          {/* الزر الذي سيبدل الوضه للوضع الليلي */}
          <label className="inline-flex items-center me-5 cursor-pointer">
            <input
              type="checkbox"
              value=""
              className="sr-only peer"
              onChange={toggleTheme} //عند التغيير سيتم تنفيذ الدالة
              checked={theme === "dark"} //يكون مختار عندما يكون الثيم دارك
            />
            <div className="relative w-11 h-6 bg-gray-200 rounded-full peer dark:bg-gray-700 peer-focus:ring-4 peer-focus:ring-green-300 dark:peer-focus:ring-green-800 peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-0.5 after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-green-600"></div>
            <span className="ms-3 text-sm font-medium text-gray-900 dark:text-gray-300">
              {theme === "light" ? "light" : "dark"}
            </span>
          </label>
        </div>
      </div>
    </>
  );
};

export default Nav;
//كومبونانت خاص لعرض الاأيقونات الخاصة بالألعاب التي تظهر المنصات التي تعمل عليها الألعاب
import { GrPersonalComputer } from "react-icons/gr";
import { FaPlaystation } from "react-icons/fa";
import { FaXbox } from "react-icons/fa";
import { BsNintendoSwitch } from "react-icons/bs";
import { FaApple } from "react-icons/fa";
import { FaAndroid } from "react-icons/fa";
import { MdPhoneIphone } from "react-icons/md";
import { BsGlobe } from "react-icons/bs";
import { FaLinux } from "react-icons/fa";

const PlatformIconList = ({ platforms }) => {
  const iconMap = {
    //عرفنا اوبجكت لكي نخزن فيه كل اسم ايقونة بالأي بي اي مقابله باسم الايقونة التي سنضيفها
    pc: GrPersonalComputer,
    playstation: FaPlaystation,
    xbox: FaXbox,
    nintendo: BsNintendoSwitch,
    mac: FaApple,
    linux: FaLinux,
    android: FaAndroid,
    ios: MdPhoneIphone,
    web: BsGlobe,
  };
  return (
    <>
      <div className="flex space-x-2 my-2">
        {platforms.map((platform) => {
          //استخدمنا حلقة للمرور على كل العناصر
          const Icon = iconMap[platform.slug];
          return <Icon key={platform.id} className="w-6 h-6 text-gray-600" />; //هنا تم استدعاء الأيقونة المقابلة لكل اسم موجود بالبلاتفورم.سلاج سيجلب الاسم المقابل للأيقونة ويتم استدعاؤها من فوق
        })}
      </div>
    </>
  );
};

export default PlatformIconList;
import { useState } from "react";
import usePlatform from "../hooks/usePlatform";

//كومبونانت خاص للقائمة التي من خلالها سيتم فلترة الألعاب حسب المنصات التي تعمل عليها
const PlatformSelector = ({ onSelectPlatform, selectPlatform }) => {
  const { error, data } = usePlatform();
  if (error) return null;
  return (
    <>
      <button
        id="platformDropdownButton"
        data-dropdown-toggle="platformDropdown"
        class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center inline-flex items-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800"
        type="button"
      >
        {selectPlatform ? selectPlatform.name : "Platfroms"}{" "}
        <svg
          class="w-2.5 h-2.5 ms-3"
          aria-hidden="true"
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 10 6"
        >
          <path
            stroke="currentColor"
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="m1 1 4 4 4-4"
          />
        </svg>
      </button>
      <div
        id="platformDropdown"
        class="z-10 hidden bg-white divide-y divide-gray-100 rounded-lg shadow-sm w-44 dark:bg-gray-700"
      >
        <ul
          class="py-2 text-sm text-gray-700 dark:text-gray-200"
          aria-labelledby="platformDropdownButton"
        >
          {/* هذا الخيار لإرجاع القائمة بدون فلترة */}
          <li onClick={() => onSelectPlatform(null)}>
            <a
              href="#"
              class="block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white"
            >
              None
            </a>
          </li>
          {data.map((platform) => (
            <li
              key={platform.id}
              onClick={() => onSelectPlatform(platform)}
              class="block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white cursor-pointer"
            >
              {platform?.name}
            </li>
          ))}
        </ul>
      </div>
    </>
  );
};

export default PlatformSelector;
//كومبونانت لعرض التقيمات كصور
import exeptional from "../assets/images/exeptional.png";
import recommended from "../assets/images/recommended.png";
import meh from "../assets/images/meh.webp";
import skip from "../assets/images/skip.png";

const RatingByEmojy = ({ rating }) => {
  const emojy = {
    2: { src: skip, alt: "skip" },
    3: { src: meh, alt: "meh" },
    4: { src: recommended, alt: "recommended" },
    5: { src: exeptional, alt: "exeptional" },
  };
  return <img {...emojy[rating]} width={25} />;
};

export default RatingByEmojy;
import React, { useRef } from "react";

const SearchInput = ({ onSearch }) => {
  const refValue = useRef(null);
  const Search = (event) => {
    if (refValue) onSearch(refValue.current.value);
  };
  return (
    <form>
      <label
        for="default-search"
        class="mb-2 text-sm font-medium text-gray-900 sr-only dark:text-white"
      >
        Search
      </label>
      <div class="relative">
        <div class="absolute inset-y-0 start-0 flex items-center ps-3 pointer-events-none">
          <svg
            class="w-4 h-4 text-gray-500 dark:text-gray-400"
            aria-hidden="true"
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 20 20"
          >
            <path
              stroke="currentColor"
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="m19 19-4-4m0-7A7 7 0 1 1 1 8a7 7 0 0 1 14 0Z"
            />
          </svg>
        </div>
        <input
          onChange={Search}
          ref={refValue}
          type="search"
          id="default-search"
          class="block w-full p-4 ps-10 text-sm text-gray-900 border border-gray-300 rounded-lg bg-gray-50 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
          placeholder="Search Games"
          required
        />
      </div>
    </form>
  );
};

export default SearchInput;
//كومبونانت لعرض الثائمة التي على اليسار
import GenreList from "./GenreList";

const SideBar = ({ onSelectGenre }) => {
  //تمرير الدالة كوسيط للابن
  return (
    <div className="col-span-1">
      <GenreList onSelectGenre={onSelectGenre} />
    </div>
  ); //استدعاء الكومبونانت الذي يحتوي على الانواع
};

export default SideBar;
const SortSelector = ({ onSelectSortOrder, selectSortOrder }) => {
  //مصفوفة تحتوي على القيم لفرز الألعاب حسب عدة قيم من الapi
  const sortOrders = [
    { value: "", label: "Relevance" },
    { value: "-added", label: "Date added" },
    { value: "name", label: "Name" },
    { value: "-release", label: "Release date" },
    { value: "-metacritic", label: "Popularity" },
    { value: "-rating", label: "Average rating" },
  ];
  //دالة للبحث عن القيمة وترجعها اذا لم يكن هنالك قيمة تضع القيمة الافتراضية
  const selectedSortLabel =
    sortOrders.find((order) => order.value === selectSortOrder)?.label ||
    "Relevance";

  return (
    <>
      <button
        id="sortDropdownButton"
        data-dropdown-toggle="sortDropdown"
        class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center inline-flex items-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800"
        type="button"
      >
        Order by: {selectedSortLabel}
        <svg
          className="w-2.5 h-2.5 ms-3"
          aria-hidden="true"
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 10 6"
        >
          <path
            stroke="currentColor"
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth="2"
            d="m1 1 4 4 4-4"
          />
        </svg>
      </button>
      <div
        id="sortDropdown"
        class="z-10 hidden bg-white divide-y divide-gray-100 rounded-lg shadow-sm w-44 dark:bg-gray-700"
      >
        <ul
          class="py-2 text-sm text-gray-700 dark:text-gray-200"
          aria-labelledby="sortDropdownButton"
        >
          {sortOrders.map((order) => (
            <li
              class="block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white cursor-pointer"
              key={order.value}
              value={order.value}
              onClick={() => onSelectSortOrder(order.value)}
            >
              <a href="#">{order.label}</a>
            </li>
          ))}
        </ul>
      </div>
    </>
  );
};

export default SortSelector;
